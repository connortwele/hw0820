{"version":3,"sources":["components/navbar.component.js","components/exercises-list.component.js","components/edit-exercise.component.js","components/create-exercise.component.js","components/create-user.component.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Component","ExercisesList","EditExercise","CreateExercise","props","onChangeUsername","bind","onChangeDescription","onChangeDuration","onChangeDate","onSubmit","state","username","description","duration","date","Date","users","axios","get","then","response","data","length","setState","map","user","catch","error","console","log","e","this","target","value","preventDefault","exercise","post","res","window","location","ref","required","onChange","key","type","selected","CreateUser","newUser","App","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e8776e31.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n\nexport default class Navbar extends Component {\n\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\n        <Link to=\"/\" className=\"navbar-brand\">ExcerTracker</Link>\n        <div className=\"collpase navbar-collapse\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"navbar-item\">\n          <Link to=\"/\" className=\"nav-link\">Exercises</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/create\" className=\"nav-link\">Create Exercise Log</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/user\" className=\"nav-link\">Create User</Link>\n          </li>\n        </ul>\n        </div>\n      </nav>\n    );\n  }\n}","import React, { Component } from 'react';\n\n\nexport default class ExercisesList extends Component {\n  render() {\n    return (\n      <div>\n        <p>You are on the Exercises List component!</p>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\n\nexport default class EditExercise extends Component {\n  render() {\n    return (\n      <div>\n        <p>You are on the Edit Exercise component!</p>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport axios from 'axios';\n\n\nexport default class CreateExercise extends Component {\n  constructor(props) {\n    super(props);\n\n\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.onChangeDuration = this.onChangeDuration.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n\n    this.state = {\n      username: '',\n      description: '',\n      duration: 0,\n      date: new Date(),\n      users: []\n    }\n  }\n\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/users/')\n    .then(response => {\n      if (response.data.length > 0) {\n        this.setState({ \n          users: response.data.map(user => user.username),\n          username: response.data[0].username\n        });\n      }\n    })\n    .catch((error) => {\n      console.log(error);\n    })\n  }\n\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n\n  onChangeDescription(e) {\n    this.setState({\n      description: e.target.value\n    });\n  }\n\n\n  onChangeDuration(e) {\n    this.setState({\n      duration: e.target.value\n    });\n  }\n\n\n  onChangeDate(date) {\n    this.setState({\n      date: date\n    });\n  }\n\n\n  onSubmit(e) {\n    e.preventDefault();\n  \n    const exercise = {\n      username: this.state.username,\n      description: this.state.description,\n      duration: this.state.duration,\n      date: this.state.date,\n    };\n  \n    console.log(exercise);\n    axios.post('http://localhost:5000/exercises/add', exercise)  \n    .then(res => console.log(res.data));\n    \n    window.location = '/';\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h3>Create New Exercise Log</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\"> \n            <label>Username: </label>\n            <select ref=\"userInput\"\n                required\n                className=\"form-control\"\n                value={this.state.username}\n                onChange={this.onChangeUsername}>\n                {\n                  this.state.users.map(function(user) {\n                    return <option \n                      key={user}\n                      value={user}>{user}\n                      </option>;\n                  })\n                }\n            </select>\n          </div>\n          <div className=\"form-group\"> \n            <label>Description: </label>\n            <input  type=\"text\"\n                required\n                className=\"form-control\"\n                value={this.state.description}\n                onChange={this.onChangeDescription}\n                />\n          </div>\n          <div className=\"form-group\">\n            <label>Duration (in minutes): </label>\n            <input \n                type=\"text\" \n                className=\"form-control\"\n                value={this.state.duration}\n                onChange={this.onChangeDuration}\n                />\n          </div>\n          <div className=\"form-group\">\n            <label>Date: </label>\n            <div>\n              <DatePicker\n                selected={this.state.date}\n                onChange={this.onChangeDate}\n              />\n            </div>\n          </div>\n\n\n          <div className=\"form-group\">\n            <input type=\"submit\" value=\"Create Exercise Log\" className=\"btn btn-primary\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class CreateUser extends Component {\nconstructor(props) {  \n    super(props); \n    \n    this.onChangeUsername = this.onChangeUsername.bind(this);  \n    this.onSubmit = this.onSubmit.bind(this); \n    this.state = {  \n        username: ''  \n};  \n}\n\nonChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n  onSubmit(e) {\n    e.preventDefault();\n    \n    const newUser = {\n      username: this.state.username,\n    };\n    \n    console.log(newUser);\n    axios.post('http://localhost:5000/users/add', newUser)                \n    .then(res => console.log(res.data));\n    \n    this.setState({\n      username: ''\n    })\n  }\n\n\n  render() {\n    return (\n        <div>\n        <h3>Create New User</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\"> \n            <label>Username: </label>\n            <input  type=\"text\"\n                required\n                className=\"form-control\"\n                value={this.state.username}\n                onChange={this.onChangeUsername}\n                />\n          </div>\n          <div className=\"form-group\">\n            <input type=\"submit\" value=\"Create User\" className=\"btn btn-primary\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nimport Navbar from './components/navbar.component'\nimport ExercisesList from './components/exercises-list.component';\nimport EditExercise from './components/edit-exercise.component';\nimport CreateExercise from './components/create-exercise.component';\nimport CreateUser from './components/create-user.component';\n\n\nfunction App() {\n        return (\n                <Router>\n                        <div className='container'>\n                                <Navbar />\n                                <br/>\n                                <Route path='/' exact component={ExercisesList} />\n                                <Route path='/edit/:id' component={EditExercise} />\n                                <Route path='/create' component={CreateExercise} />\n                                <Route path='/user' component={CreateUser} />\n                        </div>\n                </Router>\n);\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}